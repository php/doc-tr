<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 28529d3539b850e870e3aa97570f4db0e53daa03 Maintainer: nilgun Status: ready -->
<sect1 xml:id="control-structures.declare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>declare</title>
 <?phpdoc print-version-for="declare"?>
 <para>
  <literal>declare</literal> yapısı bir kod bloğunun çalıştırılması
  esnasında uygulanacak yönergeleri belirlemek için kullanılır.
  <literal>declare</literal> yapısının sözdizimi diğer akış denetim
  yapılarının söz dizimi ile benzerdir:
  <informalexample>
   <programlisting>
<![CDATA[
declare (yönerge)
    deyim
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <replaceable>yönerge</replaceable> bölümü, <literal>declare</literal>
  bloğunun davranışını belirlemek için kullanılır. Şimdilik yalnızca üç
  yönerge kullanılabilmektedir: <literal>ticks</literal> yönergesi (Daha
  fazla bilgi edinmek için aşağıya, <link
  linkend="control-structures.declare.ticks">ticks</link> yönergesine
  bakınız.), <literal>encoding</literal> yönergesi ve
  <literal>strict_types</literal> yönergesi. Daha fazla bilgi için tür
  bildirimleri sayfasındaki
  <link linkend="language.types.declarations.strict">strict</link>
  bölümüne bakınız.
 </para>
 <para>
  Yönergeler dosya derlendikçe ele alındığından, sadece birebir değerler
  yönergelere değer olarak verilebilir. Değişkenler ve sabitler kullanılamaz.
  Örnek:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Bu geçerlidir:
declare(ticks=1);

// Bu geçersizdir:
const TICK_VALUE = 1;
declare(ticks=TICK_VALUE);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <literal>declare</literal> bloğunun <replaceable>deyim</replaceable>
  bölümünün nasıl çalıştırılacağı ve çalışma esnasındaki yan etkilerinin
  ne olacağı <replaceable>yönerge</replaceable> bölümünde belirtilen
  yönergeye bağlı olabilir.
 </para>
 <para>
  <literal>declare</literal> bloğu kendinden sonra gelen tüm kodu
  etkilemesi için genel betik kapsamında da kullanılabilir. Bununla
  birlikte, <literal>declare</literal> bloğu dahil edilen bir dosyanın
  içindeyse ebeveyn dosya bundan etkilenmez.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// aşağıdaki iki örnek aynıdır:

// bunu kullanabilirsiniz:
declare(ticks=1) {
    // betiğin tamamı burada
}

// ya da bunu kullanabilirsiniz:
declare(ticks=1);
    // betiğin tamamı burada
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.declare.ticks">
  <title><code>Tikler</code></title>
 <para>
  Bir "tik", <literal>declare</literal> bloğu içersinde çözümleyici
  tarafından çalıştırılan her <varname>N</varname> tiklenebilir deyimde bir
  ortaya çıkan bir olaydır. <varname>N</varname> değeri,
  <literal>declare</literal> bloğunun <replaceable>yönerge</replaceable>
  bölümünde <code>ticks=<varname>N</varname></code> kullanılarak
  belirtilir.
 </para>
 <para>
  Her deyim tik sayımına dahil edilebilir değildir. Koşullu ifadeler ve
  bağımsız değişken ifadeleri bu tür deyimlerdendir.
 </para>
 <para>
  Her tik ile oluşturulacak eylem
  <function>register_tick_function</function> işlevi ile belirtilir. Daha
  ayrıntılı bilgi için aşağıdaki örneğe bakınız. Her tik için birden fazla
  olayın oluşabileceğini gözardı etmeyiniz.
 </para>
 <para>
  <example>
   <title>- Tik kullanım örneği</title>
   <programlisting role="php">
<![CDATA[
<?php

declare(ticks=1);

// Her tik deyimde bir çalıştırılacak işlev
function tik_eylemci()
{
    echo "tik_eylemci() çağrıldı\n" ;
}

// Tik eylemcisini belirtelim
register_tick_function("tik_eylemci"); //tik olayına sebep olur

$a = 1; //tik olayına sebep olur

if ($a > 0) {
        $a += 2; //tik olayına sebep olur
        print $a; //tik olayına sebep olur
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Ayrıca, <function>register_tick_function</function> ve
  <function>unregister_tick_function</function> işlevlerini de inceleyin.
 </simpara>
 </sect2>
 <sect2 xml:id="control-structures.declare.encoding">
  <title><code>encoding</code></title>
  <para>
    Her betiğin karakter kodlaması betiğin başında
    <literal>encoding</literal> yönergesi ile belirtilebilir.
  <example>
   <title>- Betik için kodlama belirtmek</title>
    <programlisting role="php">
<![CDATA[
<?php
declare(encoding='ISO-8859-1');
// kodlar burada
?>
]]>
    </programlisting>
   </example>
  </para>

  <caution>
   <simpara>
    İsim alanları ile birlikte kullanıldığında, tek geçerli sözdizimi
    <literal>declare(encoding='...');</literal> olup, buradaki
    <literal>...</literal> kodlama değeridir.
    <literal>declare(encoding='...') {}</literal> sözdizimi isim alanları
    ile birlikte kullanıldığında bir çözümleme hatası ile sonuçlanacaktır.
   </simpara>
  </caution>
  <para>
   Ayrıca bak: <link linkend="ini.zend.script-encoding">zend.script_encoding</link>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
