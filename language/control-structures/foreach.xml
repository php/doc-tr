<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e49940b757b35b8ef26bb64380c231eda7b49fc4 Maintainer: nilgun Status: ready -->
<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  <literal>foreach</literal> yapısı diziler üzerinde yineleme yapmayı
  kolaylaştırmaktadır. <literal>foreach</literal> yalnızca diziler ve nesneler
  için kullanılabilir; farklı veri türünde veya ilklendirilmemiş bir değişken
  ile kullanmak istediğinizde hata verir. İki sözdizimi mevcuttur:
  <informalexample>
   <programlisting>
<![CDATA[
foreach (yinelenebilir_ifade as $değer)
    deyim
foreach (yinelenebilir_ifade as $isim => $değer)
    deyim
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  İlk sözdizimi <literal>yinelenebilir_ifade</literal> ile belirtilen
  yinelenebilirin etrafında döner. Her yinelemede, sırası gelen elemanın değeri
  <literal>$değer</literal> değişkenine atanır.
 </simpara>
 <simpara>
  İkinci yöntem de aynı şeyi yapar, ek olarak her yinelemede sırası gelen
  elemanın anahtarı <literal>$isim</literal> değişkenine atanır.
 </simpara>
 <simpara>
  <literal>foreach</literal> işlevinin, <function>current</function>
  ve <function>key</function> gibi işlevler tarafından kullanılan dahili dizi
  göstericisini değiştirmediği unutulmamalıdır.
 </simpara>
 <simpara>
  PHP 5'den itibaren, <link linkend="language.oop5.iterations">nesneleri
  yinelemek</link> mümkün olmuştur.
 </simpara>
 <para>
  <literal>$değer</literal> değişkeninin önüne &amp; koyarak dizi elemanları
  üzerinde kolayca değişiklik yapılabilir. Böylece değer <link
  linkend="language.references">gönderimli</link> hale gelir.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$dizi = array(1, 2, 3, 4);
foreach ($dizi as &$değer) {
    $değer = $değer * 2;
}
// $dizi artık array(2, 4, 6, 8) olmuştur
unset($değer); // son eleman da işlendiğine göre gönderimi kaldıralım
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <warning>
  <para>
    <literal>$değer</literal> gönderim için kullanıldığından
    <literal>foreach</literal> döngüsünün sonunda son dizi elemanına
    gönderimli olarak kalır, bu bakımdan döngünün sonunda bu gönderimin
    <function>unset</function> işlevi kullanılarak kaldırılması önerilir.
    Yoksa aşağıdaki davranışla karşılaşırsınız:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$dizi = array(1, 2, 3, 4);
foreach ($dizi as &$değer) {
    $değer = $değer * 2;
}
// $dizi şimdi array(2, 4, 6, 8)

// unset($değer) olmaksızın, $değer hala son öğeye gösterimli olur: $dizi[3]

foreach ($dizi as $key => $değer) {
    // $dizi[3] artık $dizi içindeki her değerle güncellenecek
    echo "{$key} => {$değer} ";
    print_r($dizi);
 }
// ...ikinciden son değere kadar son değere kopyalanacak.

// çıktı:
// 0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
// 1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
// 2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
// 3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
?>
]]>
   </programlisting>
  </informalexample>
 </warning>
 <para>
  Bir sabit dizinin değerini gönderim olarak yinelemek mümkündür:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$değer) {
    $değer = $değer * 2;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
  <para>
  <note>
   <para>
    <literal>foreach</literal>
    <literal linkend="language.operators.errorcontrol">@</literal> kullanarak
    hata iletilerini göstermeme yeteneğini desteklemez.
   </para>
  </note>
 </para>
 <para>
  Değişik kullanımlara örnekler:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* foreach örneği 1: yalnızca değer */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
   echo "\$a değişkeninin şu anki değeri: $v.\n";
}

/* foreach örneği 2: değer (örnek olması için anahtar
 *  ile birlikte yazdırılmıştır) */

$a = array(1, 2, 3, 17);

$i = 0; /* yalnızca örnekleme için */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* foreach örneği 3: anahtar ve değer */

$a = array(
    "bir" => 1,
    "iki" => 2,
    "üç"  => 3,
    "on yedi" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* foreach örneği 4: çok boyutlu diziler */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* foreach örneği 5: dinamik diziler */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.foreach.list">
  <title>İç içe dizilerin list() ile ayrıştırılması</title>
  <?phpdoc print-version-for="foreach.list"?>

  <para>
   Dizi dizileri üzerinde döngü
   oluşturmak ve <function>list</function> işlevini değer olarak kullanmak
   suretiyle içteki diziyi döngü değişkenlerine atayarak onu da açmak artık
   mümkündür.
  </para>

  <para>
   Örneğin:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$dizi = [
    [1, 2],
    [3, 4],
];

foreach ($dizi as list($a, $b)) {
    // $a içteki dizinin ilk elemanını,
    // $b ikinci elemanını içerecektir.
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   İçteki dizinin gerekmeyen elemanlarını <function>list</function> içinde
   içermeyebilirsiniz:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$dizi = [
    [1, 2],
    [3, 4],
];

foreach ($dizi as list($a)) {
    // Burada artık $b yok.
    echo "$a\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
3
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   <function>list</function> için yeterli sayıda dizi elemanı yoksa bir uyarı
   üretilir.:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$dizi = [
    [1, 2],
    [3, 4],
];

foreach ($dizi as list($a, $b, $c)) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C:

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C:
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
