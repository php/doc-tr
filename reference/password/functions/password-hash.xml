<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5bc68add3da3cd18c40f851e944b15095d3a26aa Maintainer: nilgun Status: ready -->
<refentry xml:id="function.password-hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>password_hash</refname>
  <refpurpose>Parola aşı oluşturur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>password_hash</methodname>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>parola</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>int</type><type>null</type></type><parameter>algo</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>seçenekler</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>password_hash</function> işlevi güçlü ve tek yönlü bir aşlama
   algoritması kullanarak yeni bir parola aşı oluşturur.
  </para>
  <simpara>
   Desteklenen algoritmalar:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> - Bcrypt algoritması kullanılır
      (PHP 5.5.0'dan itibaren öntanımlıdır). Bu sabitin, PHP'ye yeni ve daha
      güçlü algoritmalar eklendikçe zamanla değişmek üzere tasarlandığı
      unutulmamalıdır. Bu sebeple, bu tanımlayıcının kullanımından kaynaklanan
      sonucun uzunluğu zamanla değişebilir. Bu bakımdan, sonucun 60 karakterden
      fazla genişleyebilen bir veritabanı sütununda saklanması önerilir (255
      karakter iyi bir seçim olacaktır).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> - Aş oluşturmak için
      <constant>CRYPT_BLOWFISH</constant> algoritması kullanılır. Bu, "$2y$"
      belirtecini kullanarak <function>crypt</function> uyumlu standart bir
      aş oluşturacaktır. Sonuç her zaman 60 karakterlik bir dizge
      olacaktır,&return.falseforfailure;.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> - Aş oluşturmak için Argon2i
      aşlama algoritması kullanılır. Bu algoritma sadece PHP, Argon2 desteği
      ile derlenmişse kullanılabilir.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2ID</constant> - Aş oluşturmak için Argon2id
      aşlama algoritması kullanılır. Bu algoritma sadece PHP, Argon2 desteği
      ile derlenmişse kullanılabilir.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   <constant>PASSWORD_BCRYPT</constant> için desteklenen seçenekler:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>salt</literal> (<type>string</type>) - Parola aşlanırken
      kullanmak üzere elle bir tuz sağlamak için kullanılır. Bunun bir
      tuzun otomatik olarak oluşturulmasını geçersiz kılıp önleyeceği
      unutulmamalıdır.
     </para>
     <para>
      Belirtilmezse, aşlanan her parola için <function>password_hash</function>
      tarafından rasgele bir tuz üretilir. Bu amaçlanan çalışma kipidir.
     </para>
     <warning>
      <para>
       <literal>salt</literal> seçeneğinin kullanımı önerilmemektedir.
       Artık öntanımlı olarak üretilen tuzun kullanımı öneriliyor.
       PHP 8.0.0 ve sonrasında elle sağlanan tuz yok sayılmaktadır.
      </para>
     </warning>
    </listitem>
    <listitem>
     <para>
      <literal>cost</literal> (<type>int</type>) - Kullanılması gereken
      algoritmik maliyeti belirtir. Bu değerin örnekleri
      <function>crypt</function> işlevinde bulunabilir.
     </para>
     <para>
      Belirtilmezse, <literal>10</literal> öntanımlı değeri kullanılır.
      Bu iyi bir temel maliyettir, ancak donanımınıza bağlı olarak
      arttırılabilir.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   <constant>PASSWORD_ARGON2I</constant>
   ve <constant>PASSWORD_ARGON2ID</constant> için desteklenen seçenekler:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>memory_cost</literal> (<type>int</type>) - Argon2 aşını
      hesaplamakta kullanılabilecek kilobibayt cinsinden azami bellek.
      <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant> öntanımlıdır.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>time_cost</literal> (<type>int</type>) - Argon2 aşını
      hesaplamak için gerekebilecek azami süre.
      <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant> öntanımlıdır.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>threads</literal> (<type>int</type>) - Argon2 aşını
      hesaplamak için kullanılacak evre sayısı.
      <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant> öntanımlıdır.
     </para>
     <warning>
      <para>
        Sadece PHP libargon2 kullanıyorsa, libsodium gerçeklenimini
        kullanmıyorsa, kullanılabilir.
      </para>
     </warning>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>parola</parameter></term>
    <listitem>
     <para>
      &password.parameter.password;
     </para>
      <caution>
       <para>
        Algoritma olarak <constant>PASSWORD_BCRYPT</constant> kullanımı
        <parameter>parola</parameter> bağımsız değişkeninin 72 bayttan
        kırpılmasına sebep olur.
       </para>
      </caution>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algo</parameter></term>
    <listitem>
     <para>
      &password.parameter.algo;
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>seçenekler</parameter></term>
    <listitem>
     <para>
      &password.parameter.options;
     </para>
     <para>
      Belirtilmezse, rasgele bir tuz oluşturulur ve öntanımlı maliyet
      kullanılır.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Başarılı olursa aşlanmış parola döner.
  </para>
  <para>
   Kullanılan algoritma, maliyet ve tuz aşın parçası olarak döndürülür. Bu
   bakımdan aş, doğrulanması için gereken tüm bilgiyi içermiş olur. Böylece,
   <function>password_verify</function> işlevinin aşı doğrulamak için ayrı bir
   yerde saklanmış tuz ve algoritma bilgisine ihtiyacı olmaz.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <function>password_hash</function> başarısız olduğunda artık
        &false; döndürmüyor, onun yerine parola aşlama algoritması geçersizse
        <classname>ValueError</classname>, bilinmeyen bir hatadan dolayı
        parola aşlanamazsa <classname>Error</classname> istisnası oluşuyor.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>algo</parameter> bağımsız değişkeni artık &null; olabiliyor.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        <parameter>algo</parameter> için artık bir dizge gerekiyor, ancak
        geriye uyumluluk için hala tamsayılar kabul ediliyor.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Argon2 parolalar için artık sodium eklentisi de bir diğer gerçeklenim
        olarak kullanılabiliyor.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        <constant>PASSWORD_ARGON2ID</constant> kullanan Argon2id parolaları
        için destek eklendi.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <constant>PASSWORD_ARGON2I</constant> kullanan Argon2i parolaları
        için destek eklendi.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>password_hash</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Sadece mevcut öntanımlı algoritmayı kullanarak parolayı aşla.
 * Bu şu anda BCRYPT'dir ve 60 karakterlik bir sonuç üretecektir.
 *
 * Öntanımlının zamanla değişebileceğine dikkat.
 * Saklama alanı 60 karakterden fazlasını alabilmeli (255 iyidir)
 */
echo password_hash("rasmuslerdorf", PASSWORD_DEFAULT);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Maliyet belirtilen <function>password_hash</function> örneği
    </title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * BCRYPT için öntanımlı maliyet 12'ye çıkarılmak isteniyor.
 * BCRYPT için 60 karakter gerektiğine dikkat.
 */
$seçenekler = [
    'cost' => 12,
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $seçenekler);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$12$QjSH496pcT5CEbzjD/vtVeH03tfHKFy36d4J0Ltp3lRtee9HDxY3K
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- <function>password_hash</function> iyi bir maliyet bulma örneği
    </title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Bu kod, karşılanabilir maliyetin ne kadar yüksek olduğunu
 * belirlemek için sunucuyu sınayacaktır. Sunucuyu çok yavaşlatmadan
 * atanabilecek en yüksek maliyetin belirlenmesi isteniyor. 10 iyi
 * bir başlangıçtır ve sunucular yeterince hızlıysa fazlası daha iyidir.
 * Aşağıdaki kod, etkileşimli oturum açılabilen sistemler için iyi bir sınır
 * olarak ≤ 350 milisaniyelik süreyi hedeflemektedir.
 */
$süreHedefi = 0.35; // 350 milisaniye

$maliyet = 10;
do {
    $maliyet++;
    $ilk = microtime(true);
    password_hash("test", PASSWORD_BCRYPT, ["cost" => $maliyet]);
    $son = microtime(true);
} while (($son - $ilk) < $süreHedefi);

echo "Yaklaşık maliyet bulundu: " . $maliyet;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Yaklaşık maliyet bulundu: 12
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Argon2i kullanılan <function>password_hash</function> örneği
    </title>
    <programlisting role="php">
<![CDATA[
<?php
echo 'Argon2i aş: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Argon2i aş: $argon2i$v=19$m=1024,t=2,p=2$YzJBSzV4TUhkMzc3d3laeg$zqU/1IN0/AogfP4cmSJI1vc8lpXRW9/S0sYY2i2jHT0
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Bu işlev için kendi tuzunuzu oluşturmamanız şiddetle tavsiye edilir.
    Tuz belirtilmezse, otomatik olarak güvenli bir tuz oluşturulur.
   </para>
   <para>
    Yukarıda belirtildiği gibi, PHP 7.0'da <literal>salt</literal>
    seçeneğinin belirtilmesi, bir kullanımdan kaldırma uyarısı
    üretecektir. El ile tuz sağlama desteği, PHP 8.0'da
    kaldırıldı.
   </para>
  </caution>
  <note>
   <para>
    Bu işlevin sunucularda sınanması ve <literal>cost</literal>
    bağımsız değişkeninin, işlevin etkileşimli sistemlerdeki çalışma süresinin
    350 milisaniyeden daha az olmasını sağlayacak şekilde ayarlanması önerilir.
    Yukarıdaki örnek kod, donanım için iyi bir maliyet değeri seçilmesine
    yardımcı olacaktır.
   </para>
  </note>
  <note>
   <simpara>
    Bu işlev tarafından desteklenen algoritmalarda yapılan güncellemeler
    (veya öntanımlı algoritmada yapılan değişiklikler) aşağıdaki kurallara
    uymalıdır:
   </simpara>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>
       Herhangi bir yeni algoritma, öntanımlı duruma gelmeden önce PHP'nin
       en az 1 tam sürümü için çekirdek kodda olmalıdır. Dolayısıyla, örneğin
       7.5.5'te yeni bir algoritma eklenirse, 7.7'ye kadar öntanımlı olması
       uygun olmayacaktır (çünkü 7.6 ilk tam sürüm olacaktır). Ancak 7.6.0'da
       farklı bir algoritma eklenmişse, 7.7.0 öntanımlılık için uygun
       olacaktır.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Öntanımlı, düzeltme sürümünde değil, yalnızca tam sürümde (7.3.0, 8.0.0
       vb.) değişmelidir. Bunun tek istisnası, geçerli öntanımlıda kritik bir
       güvenlik açığı bulunduğunda ortaya çıkan aciliyet durumudur.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_verify</function></member>
    <member><function>password_needs_rehash</function></member>
    <member><function>crypt</function></member>
    <member><function>sodium_crypto_pwhash_str</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
